#!/bin/bash
#
set -e -o pipefail

SCRIPT_DIR=$( dirname -- "$( readlink -f -- "$0"; )"; )
DISTRO="ubuntu"
DISTRO_VERSION="24.04"
IMAGE_DIR="$DISTRO-$DISTRO_VERSION"
TEMPLATE_VM_ID=9001

main() {
  check_required_programs
  create_release_dir
  download_latest_cloud_image
  verify_download
  copy_image_file
  modify_image
  create_template_vm
}

check_required_programs() {
  PROGRAM_NOT_FOUND=0

  required_program curl
  required_program virt-customize
  required_program qm
  required_program sha256sum

  if [ $PROGRAM_NOT_FOUND -ne 0 ]; then
    exit 1 
  fi 
}

required_program() {
  if ! type "$1" &>/dev/null; then
    echo "[Error] required program not found: '$1'"
    PROGRAM_NOT_FOUND=1
  fi
}

download_latest_cloud_image() {
  if [ -z "$(ls $IMAGE_DIR/$(release_tag))" ]; then
    curl --output-dir $IMAGE_DIR/$(release_tag) --remote-name-all $(all_download_files)
  fi
}

create_release_dir() {
  local release_tag=$(release_tag)
  local release_dir=$IMAGE_DIR/$release_tag
  if [ ! -d $release_dir ]; then
    mkdir -p $release_dir
    ln -s -r -f $release_dir $IMAGE_DIR/latest 
  fi
}

RELEASE_TAG=''
release_tag() {
  if [ -z $RELEASE_TAG ]; then
    RELEASE_TAG=$($SCRIPT_DIR/ubuntu-cloud-image-latest --version ${DISTRO_VERSION} --release-tag)
  fi
  echo $RELEASE_TAG
}

all_download_files() {
  echo $($SCRIPT_DIR/ubuntu-cloud-image-latest --version ${DISTRO_VERSION} --image --checksum --manifest)
}

verify_download() {
  pushd $IMAGE_DIR/latest/ &>/dev/null
  if ! sha256sum -c --ignore-missing SHA256SUMS &>/dev/null; then
    echo "[Error] Checksum validation failed"
    exit 1
  else
    echo "[Info] Checksum validation OK"
  fi
  popd &>/dev/null
}

copy_image_file() {
  pushd $IMAGE_DIR/latest/ &>/dev/null
  local img_file=$(ls *.img | head -n1) 
  cp --no-clobber $img_file $(basename --suffix='.img' $img_file).modified.img
  popd &>/dev/null
}

modify_image() {
  pushd $IMAGE_DIR/latest/ &>/dev/null
  virt-customize -a $(ls *.modified.img | head -n1) --install qemu-guest-agent
  popd &>/dev/null
}

create_template_vm() {
  pushd $IMAGE_DIR/latest/ &>/dev/null
  qm create ${TEMPLATE_VM_ID} \
    --name "${DISTRO}-${DISTRO_VERSION}-cloudinit-template" \
    --ostype l26 \
    --agent 1 \
    --memory 1024 \
    --cpu host \
    --socket 1 \
    --cores 1 \
    --vga serial0 \
    --serial0 socket \
    --net0 virtio,bridge=vmbr0

  # Assign disk and cloud-init
  qm importdisk ${TEMPLATE_VM_ID} *.modified.img local-lvm
  qm set ${TEMPLATE_VM_ID} --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-${TEMPLATE_VM_ID}-disk-0,discard=on
  qm set ${TEMPLATE_VM_ID} --boot order=scsi0
  qm set ${TEMPLATE_VM_ID} --ide2 local-lvm:cloudinit

  # Set cloud-init properties
  qm set ${TEMPLATE_VM_ID} --tags ${DISTRO}-${DISTRO_VERSION},cloudinit
  qm set ${TEMPLATE_VM_ID} --sshkeys ~/.ssh/authorized_keys
  qm set ${TEMPLATE_VM_ID} --ipconfig0 ip=dhcp
  # qm set ${TEMPLATE_VM_ID} --cicustom "vendor=local:snippets/vendor.yaml"
  # qm set ${TEMPLATE_VM_ID} --ciuser untouchedwagons
  # qm set ${TEMPLATE_VM_ID} --cipassword $(openssl passwd -6 $CLEARTEXT_PASSWORD)

  qm template ${TEMPLATE_VM_ID}
  popd &>/dev/null
}

main
